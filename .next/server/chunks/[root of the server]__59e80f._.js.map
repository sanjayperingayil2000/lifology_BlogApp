{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///home/oem/Desktop/lifology_BlogApp/graphql/schema.ts"],"sourcesContent":["export const typeDefs = `\n  type User {\n    id: Int!   \n    email: String!\n    name: String  \n    posts: [Post!]!\n  }\n\n  type Post {\n    id: Int!   \n    title: String!\n    content: String!\n    imageUrl: String\n    createdAt: String!\n    author: User!\n  }\n\n  type Query {\n    posts: [Post!]!\n    post(id: Int!): Post   \n  }\n\n  type Mutation {\n    signup(email: String!, password: String!, name: String): String\n    login(email: String!, password: String!): String\n    createPost(title: String!, content: String!, imageUrl: String): Post\n    updatePost(id: Int!, title: String, content: String, imageUrl: String): Post\n    deletePost(id: Int!): Boolean\n  }\n`;\n"],"names":[],"mappings":";;;AAAO,MAAM,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BzB,CAAC"}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":["file:///home/oem/Desktop/lifology_BlogApp/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport default prisma;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;uCAEhB"}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file:///home/oem/Desktop/lifology_BlogApp/graphql/resolvers.ts"],"sourcesContent":["import prisma from '@/lib/prisma';\n\nexport const resolvers = {\n  Query: {\n    posts: async () => await prisma.post.findMany({ include: { author: true } }),\n    post: async (_, { id }) => {\n      // Convert id to integer before passing it to Prisma\n      const postId = parseInt(id, 10);\n\n      if (isNaN(postId)) {\n        throw new Error(\"Invalid post ID\");\n      }\n\n      return await prisma.post.findUnique({\n        where: { id: postId },\n        include: { author: true },\n      });\n    },\n  },\n  Mutation: {\n    signup: async (_, { email, password, name }) => {\n      const hashedPassword = await bcrypt.hash(password, 10);\n      const user = await prisma.user.create({\n        data: { email, password: hashedPassword, name },\n      });\n      return generateToken(user.id);\n    },\n    login: async (_, { email, password }) => {\n      const user = await prisma.user.findUnique({ where: { email } });\n      if (!user || !(await bcrypt.compare(password, user.password))) {\n        throw new Error('Invalid credentials');\n      }\n      return generateToken(user.id);\n    },\n    createPost: async (_, { title, content, imageUrl }, { userId }) => {\n      if (!userId) throw new Error('Unauthorized');\n      return await prisma.post.create({\n        data: { title, content, imageUrl, authorId: userId },\n        include: { author: true },\n      });\n    },\n    updatePost: async (_, { id, title, content, imageUrl }, { userId }) => {\n      if (!userId) throw new Error('Unauthorized');\n      const postId = parseInt(id, 10); // Convert to integer\n\n      if (isNaN(postId)) {\n        throw new Error(\"Invalid post ID\");\n      }\n\n      return await prisma.post.update({\n        where: { id: postId },\n        data: { title, content, imageUrl },\n        include: { author: true },\n      });\n    },\n    deletePost: async (_, { id }, { userId }) => {\n      if (!userId) throw new Error('Unauthorized');\n      const postId = parseInt(id, 10); // Convert to integer\n\n      if (isNaN(postId)) {\n        throw new Error(\"Invalid post ID\");\n      }\n\n      await prisma.post.delete({ where: { id: postId } });\n      return true;\n    },\n  },\n};\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,YAAY;IACvB,OAAO;QACL,OAAO,UAAY,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAAE,SAAS;oBAAE,QAAQ;gBAAK;YAAE;QAC1E,MAAM,OAAO,GAAG,EAAE,EAAE,EAAE;YACpB,oDAAoD;YACpD,MAAM,SAAS,SAAS,IAAI;YAE5B,IAAI,MAAM,SAAS;gBACjB,MAAM,IAAI,MAAM;YAClB;YAEA,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAClC,OAAO;oBAAE,IAAI;gBAAO;gBACpB,SAAS;oBAAE,QAAQ;gBAAK;YAC1B;QACF;IACF;IACA,UAAU;QACR,QAAQ,OAAO,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE;YACzC,MAAM,iBAAiB,MAAM,OAAO,IAAI,CAAC,UAAU;YACnD,MAAM,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACpC,MAAM;oBAAE;oBAAO,UAAU;oBAAgB;gBAAK;YAChD;YACA,OAAO,cAAc,KAAK,EAAE;QAC9B;QACA,OAAO,OAAO,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE;YAClC,MAAM,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAAE,OAAO;oBAAE;gBAAM;YAAE;YAC7D,IAAI,CAAC,QAAQ,CAAE,MAAM,OAAO,OAAO,CAAC,UAAU,KAAK,QAAQ,GAAI;gBAC7D,MAAM,IAAI,MAAM;YAClB;YACA,OAAO,cAAc,KAAK,EAAE;QAC9B;QACA,YAAY,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE;YAC5D,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;YAC7B,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC9B,MAAM;oBAAE;oBAAO;oBAAS;oBAAU,UAAU;gBAAO;gBACnD,SAAS;oBAAE,QAAQ;gBAAK;YAC1B;QACF;QACA,YAAY,OAAO,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE;YAChE,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;YAC7B,MAAM,SAAS,SAAS,IAAI,KAAK,qBAAqB;YAEtD,IAAI,MAAM,SAAS;gBACjB,MAAM,IAAI,MAAM;YAClB;YAEA,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC9B,OAAO;oBAAE,IAAI;gBAAO;gBACpB,MAAM;oBAAE;oBAAO;oBAAS;gBAAS;gBACjC,SAAS;oBAAE,QAAQ;gBAAK;YAC1B;QACF;QACA,YAAY,OAAO,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE;YACtC,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;YAC7B,MAAM,SAAS,SAAS,IAAI,KAAK,qBAAqB;YAEtD,IAAI,MAAM,SAAS;gBACjB,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBAAE,OAAO;oBAAE,IAAI;gBAAO;YAAE;YACjD,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///home/oem/Desktop/lifology_BlogApp/utils/auth.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.JWT_SECRET;\n\nif (!JWT_SECRET) {\n  throw new Error('JWT_SECRET is not defined in the environment variables.');\n}\n\nexport const generateToken = (userId: number): string => {\n  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: '1h' });\n};\n\nexport const verifyToken = (token: string): { userId: number } => {\n  return jwt.verify(token, JWT_SECRET) as { userId: number };\n};"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAEzC,IAAI,CAAC,YAAY;IACf,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,gBAAgB,CAAC;IAC5B,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;QAAE;IAAO,GAAG,YAAY;QAAE,WAAW;IAAK;AAC5D;AAEO,MAAM,cAAc,CAAC;IAC1B,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;AAC3B"}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 335, "column": 0}, "map": {"version":3,"sources":["file:///home/oem/Desktop/lifology_BlogApp/app/api/graphql/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { ApolloServer } from '@apollo/server';\nimport { startServerAndCreateNextHandler } from '@as-integrations/next';\nimport { typeDefs } from '@/graphql/schema';\nimport { resolvers } from '@/graphql/resolvers';\nimport prisma from '@/lib/prisma';\nimport { verifyToken } from '@/utils/auth';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nconst handler = startServerAndCreateNextHandler(server, {\n  context: async (req) => { // Ensure `req` is passed correctly\n    // Extract the token from the Authorization header\n    const token = req.headers.get('authorization')?.replace('Bearer ', '');\n    let userId = null;\n\n    if (token) {\n      try {\n        const decoded = verifyToken(token);\n        userId = decoded.userId;\n      } catch (error) {\n        console.error('Invalid token:', error);\n      }\n    }\n\n    return { prisma, userId };\n  },\n});\n\nexport async function GET(req: Request) {\n  return handler(req);\n}\n\nexport async function POST(req: Request) {\n  return handler(req);\n}\n\nexport async function OPTIONS(req: Request) {\n  return new NextResponse(null, {\n    status: 204,\n    headers: {\n      'Access-Control-Allow-Credentials': 'true',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET,OPTIONS,POST',\n      'Access-Control-Allow-Headers': '*',\n    },\n  });\n}"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;;AAOA,MAAM,SAAS,IAAI,mKAAA,CAAA,eAAY,CAAC;IAC9B,UAAA,mHAAA,CAAA,WAAQ;IACR,WAAA,sHAAA,CAAA,YAAS;AACX;AAEA,MAAM,UAAU,CAAA,GAAA,+JAAA,CAAA,kCAA+B,AAAD,EAAE,QAAQ;IACtD,SAAS,OAAO;QACd,kDAAkD;QAClD,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,QAAQ,WAAW;QACnE,IAAI,SAAS;QAEb,IAAI,OAAO;YACT,IAAI;gBACF,MAAM,UAAU,CAAA,GAAA,+GAAA,CAAA,cAAW,AAAD,EAAE;gBAC5B,SAAS,QAAQ,MAAM;YACzB,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,kBAAkB;YAClC;QACF;QAEA,OAAO;YAAE,QAAA,+GAAA,CAAA,UAAM;YAAE;QAAO;IAC1B;AACF;AAEO,eAAe,IAAI,GAAY;IACpC,OAAO,QAAQ;AACjB;AAEO,eAAe,KAAK,GAAY;IACrC,OAAO,QAAQ;AACjB;AAEO,eAAe,QAAQ,GAAY;IACxC,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;QAC5B,QAAQ;QACR,SAAS;YACP,oCAAoC;YACpC,+BAA+B;YAC/B,gCAAgC;YAChC,gCAAgC;QAClC;IACF;AACF"}},
    {"offset": {"line": 395, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}