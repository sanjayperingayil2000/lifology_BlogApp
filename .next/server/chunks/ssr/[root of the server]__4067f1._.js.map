{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/oem/Desktop/lifology_BlogApp/lib/apolloClient.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst httpLink = createHttpLink({\n  uri: process.env.NEXT_PUBLIC_GRAPHQL_URI || \"/api/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  if (typeof window !== \"undefined\") {\n    const token = localStorage.getItem(\"token\");\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    };\n  }\n  return { headers };\n});\n\n// ‚úÖ Debug: Log all GraphQL operations before sending\nconst loggingLink = {\n  request: async (operation, forward) => {\n    console.log(\"üì° Sending GraphQL Request:\", operation.operationName);\n    console.log(\"üìù Variables:\", operation.variables);\n    return forward(operation);\n  },\n};\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n"],"names":[],"mappings":";;;AAAA;AACA;AADA;AAAA;;;AAGA,MAAM,WAAW,CAAA,GAAA,oKAAA,CAAA,iBAAc,AAAD,EAAE;IAC9B,KAAK,yEAAuC;AAC9C;AAEA,MAAM,WAAW,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAD,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE;IACzC,uCAAmC;;IAQnC;IACA,OAAO;QAAE;IAAQ;AACnB;AAEA,qDAAqD;AACrD,MAAM,cAAc;IAClB,SAAS,OAAO,WAAW;QACzB,QAAQ,GAAG,CAAC,+BAA+B,UAAU,aAAa;QAClE,QAAQ,GAAG,CAAC,iBAAiB,UAAU,SAAS;QAChD,OAAO,QAAQ;IACjB;AACF;AAEA,MAAM,SAAS,IAAI,0KAAA,CAAA,eAAY,CAAC;IAC9B,MAAM,SAAS,MAAM,CAAC;IACtB,OAAO,IAAI,wKAAA,CAAA,gBAAa;AAC1B;uCAEe"}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///home/oem/Desktop/lifology_BlogApp/app/client-provider.tsx"],"sourcesContent":["\"use client\"; // Ensure this is present\n\nimport { ApolloProvider } from '@apollo/client';\nimport client from '@/lib/apolloClient';\n\nexport default function ClientProvider({ children }: { children: React.ReactNode }) {\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n}"],"names":[],"mappings":";;;;AAGA;AADA;AAFA,cAAc,yBAAyB;;;;AAKxB,SAAS,eAAe,EAAE,QAAQ,EAAiC;IAChF,qBAAO,8OAAC,wKAAA,CAAA,iBAAc;QAAC,QAAQ,mHAAA,CAAA,UAAM;kBAAG;;;;;;AAC1C"}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}