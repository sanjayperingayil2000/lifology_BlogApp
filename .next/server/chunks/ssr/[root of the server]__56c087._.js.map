{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///home/oem/Desktop/lifology_BlogApp/app/blog/%5Bid%5D/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useParams } from \"next/navigation\";\n\nconst GET_POST = gql`\n  query GetPost($id: Int!) {\n    post(id: $id) {\n      id\n      title\n      imageUrl\n      createdAt\n      content  # This should match the fields you want to fetch\n    }\n  }\n`;\n\nconst BlogPost = () => {\n  const params = useParams();\n\n  // Ensure `id` is parsed as an integer\n  const postId = params?.id ? parseInt(params.id, 10) : null;\n\n  const { data, loading, error } = useQuery(GET_POST, {\n    skip: !postId, // Prevents sending invalid requests\n    variables: { id: postId }, // Pass `id` as integer to match GraphQL type\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) {\n    console.error(\"GraphQL Error:\", error); // Debug: Log full error\n    return <p>Error: {error.message}</p>;\n  }\n  if (!data || !data.post) return <p>No post found.</p>;\n\n  // Ensure date is formatted correctly\n  const formattedDate = data?.post?.createdAt\n    ? new Date(data.post.createdAt).toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n      })\n    : \"Unknown Date\";\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold\">{data.post.title}</h1>\n      {data.post.imageUrl && (\n        <img\n          src={data.post.imageUrl}\n          alt={data.post.title}\n          className=\"w-full h-64 object-cover mt-4\"\n        />\n      )}\n      <p className=\"text-gray-500 mt-2\">Published on: {formattedDate}</p>\n      <p className=\"text-gray-600 mt-2\">{data.post.content}</p> {/* Render content */}\n    </div>\n  );\n};\n\nexport default BlogPost;\n"],"names":[],"mappings":";;;;AAGA;AADA;AAAA;AAFA;;;;AAKA,MAAM,WAAW,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;AAUrB,CAAC;AAED,MAAM,WAAW;IACf,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,sCAAsC;IACtC,MAAM,SAAS,QAAQ,KAAK,SAAS,OAAO,EAAE,EAAE,MAAM;IAEtD,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,gKAAA,CAAA,WAAQ,AAAD,EAAE,UAAU;QAClD,MAAM,CAAC;QACP,WAAW;YAAE,IAAI;QAAO;IAC1B;IAEA,IAAI,SAAS,qBAAO,8OAAC;kBAAE;;;;;;IACvB,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,kBAAkB,QAAQ,wBAAwB;QAChE,qBAAO,8OAAC;;gBAAE;gBAAQ,MAAM,OAAO;;;;;;;IACjC;IACA,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE,qBAAO,8OAAC;kBAAE;;;;;;IAEnC,qCAAqC;IACrC,MAAM,gBAAgB,MAAM,MAAM,YAC9B,IAAI,KAAK,KAAK,IAAI,CAAC,SAAS,EAAE,kBAAkB,CAAC,SAAS;QACxD,MAAM;QACN,OAAO;QACP,KAAK;IACP,KACA;IAEJ,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAAsB,KAAK,IAAI,CAAC,KAAK;;;;;;YAClD,KAAK,IAAI,CAAC,QAAQ,kBACjB,8OAAC;gBACC,KAAK,KAAK,IAAI,CAAC,QAAQ;gBACvB,KAAK,KAAK,IAAI,CAAC,KAAK;gBACpB,WAAU;;;;;;0BAGd,8OAAC;gBAAE,WAAU;;oBAAqB;oBAAe;;;;;;;0BACjD,8OAAC;gBAAE,WAAU;0BAAsB,KAAK,IAAI,CAAC,OAAO;;;;;;YAAK;;;;;;;AAG/D;uCAEe"}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}