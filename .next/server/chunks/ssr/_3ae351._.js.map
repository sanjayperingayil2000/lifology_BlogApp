{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/oem/Desktop/lifology_BlogApp/app/blog/%5Bid%5D/page.tsx"],"sourcesContent":["\n\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"next/navigation\";\n\nconst GET_POST = gql`\n  query GetPost($id: ID!) {\n    post(id: $id) {\n      id\n      title\n      imageUrl\n      description\n      createdAt\n      usersId\n    }\n  }\n`;\n\nconst BlogPost = () => {\n  const params = useParams();\n  const [postId, setPostId] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (params?.id) {\n      setPostId(params.id as string);\n    }\n  }, [params]);\n\n  const { data, loading, error } = useQuery(GET_POST, {\n    skip: !postId,\n    variables: { id: postId },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n  if (!data || !data.post) return <p>No post found.</p>;\n\n  // âœ… Ensure date is properly formatted\n  const formattedDate = data.post.createdAt\n    ? new Date(data.post.createdAt).toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n      })\n    : \"Unknown Date\";\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold\">{data.post.title}</h1>\n      <img\n        src={data.post.imageUrl}\n        alt={data.post.title}\n        className=\"w-full h-64 object-cover mt-4\"\n      />\n      <p className=\"text-gray-500 mt-2\">Published on: {formattedDate}</p>\n      <p className=\"text-gray-600 mt-2\">{data.post.description}</p>\n    </div>\n  );\n};\n\nexport default BlogPost;\n"],"names":[],"mappings":";;;;AAGA;AACA;AAFA;AAEA;AAFA;;;;;AAIA,MAAM,WAAW,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;AAWrB,CAAC;AAED,MAAM,WAAW;IACf,MAAM,SAAS,CAAA,GAAA,qLAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAEpD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,QAAQ,IAAI;YACd,UAAU,OAAO,EAAE;QACrB;IACF,GAAG;QAAC;KAAO;IAEX,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,gKAAA,CAAA,WAAQ,AAAD,EAAE,UAAU;QAClD,MAAM,CAAC;QACP,WAAW;YAAE,IAAI;QAAO;IAC1B;IAEA,IAAI,SAAS,qBAAO,8OAAC;kBAAE;;;;;;IACvB,IAAI,OAAO,qBAAO,8OAAC;;YAAE;YAAQ,MAAM,OAAO;;;;;;;IAC1C,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE,qBAAO,8OAAC;kBAAE;;;;;;IAEnC,sCAAsC;IACtC,MAAM,gBAAgB,KAAK,IAAI,CAAC,SAAS,GACrC,IAAI,KAAK,KAAK,IAAI,CAAC,SAAS,EAAE,kBAAkB,CAAC,SAAS;QACxD,MAAM;QACN,OAAO;QACP,KAAK;IACP,KACA;IAEJ,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAAsB,KAAK,IAAI,CAAC,KAAK;;;;;;0BACnD,8OAAC;gBACC,KAAK,KAAK,IAAI,CAAC,QAAQ;gBACvB,KAAK,KAAK,IAAI,CAAC,KAAK;gBACpB,WAAU;;;;;;0BAEZ,8OAAC;gBAAE,WAAU;;oBAAqB;oBAAe;;;;;;;0BACjD,8OAAC;gBAAE,WAAU;0BAAsB,KAAK,IAAI,CAAC,WAAW;;;;;;;;;;;;AAG9D;uCAEe"}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}